
Page 1
CH55X Assembly instruction description
Applicable models include: CH551, CH552, CH554, CH558, CH559
CH55X assembly instruction cycle overview:
a. The number of instruction cycles of non-jump instructions is the same as the number of instruction bytes (except for the DIV instruction of CH551/2/3/4);
b. Most instructions are single-byte, 1T single-cycle instructions;
c. Jump instructions containing MOVC/RET/CALL are usually several cycles longer than the number of instruction bytes;
d. RET/RETI instruction starts with 3 more cycles, if the return address is odd, add 1 cycle;
e. The MOVC instruction starts with 4 more cycles, if the address of this instruction is an odd number, add 1 cycle, and if the address of the next instruction is an odd number, add 1 cycle;
f. JMP@A instruction starts with 2 more cycles, if the address of this instruction is odd, add 1 cycle, if the target address is odd, add 1 cycle;
g. JB/JNB/JBC/CJNE_A, dir/DJNZ instructions start at 2 more cycles, if the address of this instruction is odd, add 1 cycle, such as the target address
Add 1 cycle for odd numbers;
h. The remaining jump instructions start at 2 more cycles, if the target address is odd, add 1 cycle;
i. If the conditional jump instruction does not jump, the cycle number is the same as the instruction byte number.
Note: The above period refers to the reciprocal of the current system main frequency of CH55X.
category
Instruction format
Function description
instruction
byte
instruction
cycle
Send
Generic
make
(29
Article)
MOV A,Rn
(Rn)→(A)The content in Rn is sent to accumulator A, Rn=R0-R7
1
1
MOV A,direct
(direct)→(A) The content in the direct unit address is sent to the accumulator A
2
2
MOV A,@Ri
(Ri)→(A) The content in the address unit pointed to by the content of Ri is sent to the accumulation
A, Ri=R0 or R1
1
1
MOV A,#data
#data→(A) Send immediate data to accumulator A
2
2
MOV Rn,A
(A)→(Rn) The contents of accumulator A are sent to register Rn
1
1
MOV Rn,direct
(direct)→(Rn) directly address the contents of the unit to the register
2
2
MOV Rn,#data
#data→(Rn) The immediate data is sent directly to the register Rn
2
2
MOV direct,A
(A)→(direct) The content in accumulator A is sent to the direct addressing unit
2
2
MOV direct,Rn
(Rn)→(direct) The content in the register is sent to the direct addressing unit
2
2
MOV direct2,direct1
(direct1)→(direct2) directly address the content in the unit 1 send directly
Addressing unit 2
3
3
MOV direct,@Ri
(Ri)→(direct) The content in the register is sent to the direct addressing unit
2
2
MOV direct,#data
#data→(direct) Immediate data sending direct addressing unit
3
3
MOV @Ri,A
(A)→((Ri)) The content in accumulator A is sent to the content in Ri as
RAM unit of address
1
1
MOV @Ri,direct
(direct)→((Ri)) Direct addressing unit content is sent to the inside of Ri
RAM unit containing address
2
2
MOV @Ri,#data
#data→((Ri)) Immediate data sent to the address with the content in Ri
RAM unit
2
2
MOV DPTR,#data16
#dataH→(DPH), #dataL→(DPL) The high 8 bits of the 16-bit constant are sent
To DPH, the lower 8 bits are sent to DPL
3
3
MOVX A,@DPTR
((DPTR))→(A) The data pointer points to the external RAM (16-bit address)
The content is sent to accumulator A
1
1
MOVX A,@Ri
((Ri))→(A) Register Ri points to the internal RAM (8-bit address)
The content is sent to accumulator A, the upper 8 bits of address are provided by P2
1
1
MOVX @DPTR,A
(A)→((DPTR)) The content in the accumulator is sent to the data pointer to point to the outside
1
1
Page 2
RAM (16-bit address)
MOVX @Ri,A
(A)→((Ri)) The contents of the accumulator are sent to the register Ri to point to the outside
RAM (8-bit address), the upper 8-bit address is provided by P2
1
1
MOVC A,@A+DPTR
((A)+(DPTR))→(A) The content in the table address unit is sent to the accumulation
In device A
1
5/6/7
MOVC A,@A+PC
(PC)+1→(PC), ((A)+(PC))→(A) in the table address unit
The content is sent to accumulator A
1
5/6/7
XCH A,Rn
(A)←→(Rn) The contents of the accumulator and the working register Rn are exchanged
1
1
XCH A,direct
(direct)←→(A) The contents of accumulator A and the contents of the direct addressing unit
Content exchange
2
2
XCH A,@Ri
(A)←→((Ri)) Accumulator and the storage list pointed to by the working register Ri
Content interchange in the meta
1
1
XCHD A,@Ri
(A[3:0])←→((Ri)[3:0]) Accumulator and working register Ri
Refers to the low nibble exchange of the content in the storage unit
1
1
SWAP A
(A[3:0])←→(A[7:4]) The content of the accumulator
change
1
1
PUSH direct
(SP)+1→(SP), (direct)→(SP) The stack pointer is first incremented by 1,
The data in the direct addressing unit is sent to the unit pointed to by the stack pointer SP
2
2
POP direct
(SP)→(direct), (SP)-1→(SP) pointed to by the stack pointer SP
The unit data is sent to the direct addressing unit, and the stack pointer SP is decremented
1 operation
2
2
arithmetic
Calculation
Generic
make
(twenty four
Article)
ADD A,Rn
(A)+(Rn)→(A) The contents of the accumulator A and the working register Rn
Add the contents of and the result is stored in A
1
1
ADD A,direct
(A)+(direct)→(A) The content of accumulator A and the direct address list
The content in the element is added, and the result is stored in A.
2
2
ADD A,@Ri
(A)+((Ri))→(A) Contents of accumulator A and working register Ri
Add the contents of the pointed address unit, and the result is stored in A
1
1
ADD A,#data
(A)+#data→(A) The content in accumulator A is the same as the immediate data #data
Add, the result is stored in A
2
2
ADDC A, Rn
(A)+Rn+(C)→(A) The contents of accumulator A and working register Rn
Add the contents in A, together with the carry bit, and the result is stored in A
1
1
ADDC A,direct
(A)+(direct)+(C)→(A) The content in the accumulator A and the direct ground
The contents of the address unit are added together with the carry bit, and the result is stored in A
2
2
ADDC A,@Ri
(A)+((Ri))+(C)→(A) Contents and working registers of accumulator A
Ri points to the content in the address unit and add it together with the carry bit. The result
Exists in A
1
1
ADDC A,#data
(A)+#data+(C)→(A) The contents of accumulator A and the immediate data together
Add the carry bits and the result is stored in A
2
2
INC A
(A)+1→(A) Add 1 to the content of accumulator A, and the result is stored in A
1
1
INC Rn
(Rn)+1→(Rn) The content of register Rn is increased by 1, and the result is returned to the original address
In the unit
1
1
INC direct
(direct)+1→(direct) add 1 to the content in the direct address unit,
The result is sent back to the original address unit
2
2
INC @Ri
((Ri))+1→((Ri)) in the address unit pointed to by the contents of the register
Add 1 to the content and the result is sent back to the original address unit
1
1
Page 3
INC DPTR
(DPTR)+1→(DPTR) The content of the data pointer is increased by 1, and the result is returned to the data
Pointer
1
1
SUBB A,Rn
(A)-(Rn)-(C)→(A) Contents of accumulator A and working registers
Subtract the content in A, together with the borrow bit, and the result is stored in A
1
1
SUBB A,direct
(A)-(direct)-(C)→(A) The content in the accumulator A and the direct ground
The content in the address unit, and the borrow bit are subtracted, and the result is stored in A
2
2
SUBB A,@Ri
(A)-((Ri))-(C)→(A) Contents and working registers of accumulator A
The contents of the address unit pointed to by the device Ri and the borrow bit are subtracted, and the result is
Fruit exists in A
1
1
SUBB A,#data
(A)-#data-(C)→(A) The content in accumulator A and the immediate data, connection
Subtract the same borrow bit, the result is stored in A
2
2
DEC A
(A)-1→(A) The content in accumulator A is subtracted by 1, and the result is sent back to accumulator A
in
1
1
DEC Rn
(Rn)-1→(Rn) The content of register Rn is subtracted by 1, and the result is returned to the register
Rn
1
1
DEC direct
(direct)-1→(direct) The content in the direct address unit minus 1, the result
Direct address unit
2
2
DEC @Ri
((Ri))-1→((Ri)) the contents of the address unit pointed to by register Ri
Subtract 1, the result is sent back to the original address unit
1
1
MUL AB
(A)×(B)→(A) and (B) The contents of accumulator A and register B
The contents of are multiplied, and the result is stored in A and B
1
1
DIV AB
(558/559)
(A)÷(B)→(A) and (B) The contents of accumulator A divided by register B
In the content, the obtained quotient is stored in the accumulator A, and the remainder is stored in the register
In device B
1
1
DIV AB
(CH551/552/554)
(A)÷(B)→(A) and (B) The contents of accumulator A divided by register B
In the content, the obtained quotient is stored in the accumulator A, and the remainder is stored in the register
In device B
1
4
DA A
The accumulator performs decimal conversion
1
1
logic
operating
instruction
(twenty four
Article)
ANL A, Rn
The contents of accumulator A and the contents of register Rn perform logical operations
The result is stored in accumulator A
1
1
ANL A,direct
The content in the accumulator A and the content in the direct address unit execute and logic
Edit operation, the result is stored in register A
2
2
ANL A,@Ri
The contents of accumulator A and the address unit pointed to by working register Ri
The content is executed and logical operation, and the result is stored in accumulator A
1
1
ANL A,#data
The contents of accumulator A and the immediate data perform AND logic operation. Result exists
Accumulator A
2
2
ANL direct,A
The contents of the direct address unit and the contents of the accumulator A execute the AND logic
Operation, the result is stored in the direct address unit
2
2
ANL direct,#data
The content and immediate data in the direct address unit perform AND logical operations, and the result is
Direct address unit
3
3
ORL A,Rn
The contents of accumulator A and the contents of register Rn perform logical OR operation
The result is stored in accumulator A
1
1
ORL A,direct
The content in the accumulator A and the content in the direct address unit execute logic
OR operation, the result is stored in register A
2
2
ORL A,@Ri
The contents of accumulator A and the address unit pointed to by working register Ri
1
1
Page 4
The content performs a logical OR operation, and the result is stored in the accumulator A
ORL A,#data
The contents of the accumulator A and the immediate data perform a logical OR operation, and the result exists
Accumulator A
2
2
ORL direct,A
The contents of the direct address unit and the contents of accumulator A perform logical OR
Operation, the result is stored in the direct address unit
2
2
ORL direct,#data
The content in the direct address unit and the immediate data perform a logical OR operation, resulting in
Direct address unit
3
3
XRL A,Rn
The contents of accumulator A and the contents of register Rn perform logical exclusive OR operation
The result is stored in accumulator A
1
1
XRL A,direct
The content in the accumulator A and the content in the direct address unit execute logic
XOR operation, the result is stored in register A
2
2
XRL A,@Ri
The contents of accumulator A and the address unit pointed to by working register Ri
The content performs logical exclusive OR operation, and the result is stored in accumulator A
1
1
XRL A,#data
The contents of the accumulator A and the immediate data perform a logical XOR operation, and the result is stored
In accumulator A
2
2
XRL direct,A
The contents of the direct address unit and the contents of the accumulator A execute a logical difference
Or operation, the result is stored in the direct address unit
2
2
XRL direct,#data
The content in the direct address unit and the immediate data perform a logical XOR operation,
The result is stored in the direct address unit
3
3
CLR A
0→(A), the content in the accumulator is cleared to 0
1
1
CPL A
The content of the accumulator is inverted by bit
1
1
RL A
The content of accumulator A is shifted to the left
1
1
RR A
The content in accumulator A is shifted one bit to the right
1
1
RLC A
The contents of accumulator A and the carry bit CY are shifted one bit to the left
1
1
RRC A
The contents of the accumulator A and the carry bit CY are shifted one bit to the right
1
1
control
Transfer
instruction
(16
Article)
LJMP addr16
addr16→(PC), assign a new value to the program counter (16-bit address)
3
5/6
AJMP addr11
(PC)+2→(PC), addr11→(PC[10:0]) program counter assignment
The new value (11-bit address), (PC[15:11]) does not change.
2
4/5
SJMP rel
(PC)+2+rel→(PC) The current program counter first adds 2 and then the offset
The shift gives the program counter a new value.
2
4/5
JMP @A+DPTR
(A)+(DPTR)→(PC), add the value of the address unit pointed to by the accumulator
The value of the data pointer assigns a new value to the program counter.
1
3/4/5
JZ rel
A=0,(PC)+2+rel→(PC), the content of the accumulator is 0, then transfer
To the address pointed to by the offset, otherwise the program executes down
2
2 or
4/5
JNZ rel
A≠0,(PC)+2+rel→(PC), the content of the accumulator is not 0, then transfer
Move to the address pointed to by the offset, otherwise the program will execute down
2
2 or
4/5
CJNE A,#data,rel
A≠#data,(PC)+3+rel→(PC), the content in the accumulator is not equal to
Immediate number, transfer to the address pointed to by the offset, otherwise the program goes
Execute
3
3 or
5/6
CJNE Rn,#data,rel
A≠#data,(PC)+3+rel→(PC), the content of working register Rn
Is not equal to the immediate value, transfer to the address pointed to by the offset, otherwise
Execute the program down
3
3 or
5/6
CJNE @Ri,#data,rel
A≠#data,(PC)+3+rel→(PC), working register Ri points to address
The content in the unit is not equal to the immediate value, then transfer to the offset point
Address, otherwise the program will execute
3
3 or
5/6
Page 5
CJNE A,direct,rel
A≠(direct),(PC)+3+rel→(PC), the content in the accumulator is not
Equal to the content of the direct address unit, then transfer to the offset pointed to
Address, otherwise the program is executed
3
3 or
5/6/7
DJNZ Rn,rel
(Rn)-1→(Rn),(Rn)≠0,(PC)+2+rel→(PC) working register
If Rn minus 1 is not equal to 0, then transfer to the address pointed to by the offset,
Otherwise, the program is executed
2
2 or
4/5/6
DJNZ direct,rel
(direct)-1→(direct),(direct)≠0,(PC)+2+rel→
(PC) The content in the direct address unit minus 1 is not equal to 0, then transfer to the partial
The address pointed to by the shift, otherwise the program will execute down
3
3 or
5/6/7
LCALL addr16
Long call instruction can call subroutine in 64KB space. At this time (PC)+3
→(PC), (SP)+1→(SP), (PC[7:0])→(SP), (SP)+1→
(SP), (PC[15:8])→(SP), addr16→(PC), that is, from
The return address pressed when calling the subroutine is popped from the stack.
3
5/6
ACALL addr11
Absolute call instruction, subroutine can be called in 2KB space, at this time (PC)+2
→(PC), (SP)+1→(SP), (PC[7:0])→(SP), (SP)+1→
(SP), (PC[15:8])→(SP), addr11→(PC[10:0])
2
4/5
RET
Subroutine return instruction
1
4/5
RETI
Interrupt return instruction, RETI instruction cannot be replaced by RET
1
4/5
Position
Refer to
make
(18
Article)
MOV C,bit
bit→CY, a certain bit of data is sent to CY
2
2
MOV bit, C
CY→bit, CY data is sent to a bit
2
2
CLR C
0→CY, clear CY
1
1
CLR bit
0→bit, clear a bit
2
2
SETB C
1→CY, set CY
1
1
SETB bit
1→bit, set a bit
2
2
CPL C
CY negated
1
1
CPL bit
bit negated
2
2
ANL C,bit
CY and bit are AND, and the result is stored in CY
2
2
ANL C,/bit
CY and the inverse of bit are AND, and the result is stored in CY
2
2
ORL C,bit
CY is ORed with bit, and the result is stored in CY
2
2
ORL C,/bit
CY is ORed with the inverse of bit, and the result is stored in CY
2
2
JC rel
(CY)=1 transfer, (PC)+2+rel→PC, otherwise the program will execute down,
(PC)+2→PC
2
2 or
4/5
JNC rel
(CY)=0 transfer, (PC)+2+rel→PC, otherwise the program will execute down,
(PC)+2→PC
2
2 or
4/5
JB bit,rel
The bit status is 1 transfer, (PC)+3+rel→PC, otherwise the program will execute down
OK, (PC)+3→PC
3
3 or
5/6/7
JNB bit,rel
The bit status is 0, then (PC)+3+rel→PC, otherwise the program will execute down
OK, (PC)+3→PC
3
3 or
5/6/7
JBC bit,rel
The bit status is 1 transfer and clear the bit to 0, (PC)+3+rel→PC, no
Then the program is executed down, (PC)+3→PC
3
3 or
5/6/7
NOP
Null instruction, this instruction in addition to increase PC by 1, consumes one cycle,
No operation is performed, can be used for short time delay
1
1
Add
instruction
DB 0xA5
XRAM quick copy instruction
1
1
Note: The mark is gray, which means the number of instruction bytes is not equal to the cycle required to execute the instruction
Page 6
Examples of using new commands:
;New Instruction: MOVX @DPTR1,A
;Instruction Code: 0xA5
;Instruction Cycle: 1
;Instruction Operation:
;step-1. write ACC into xdata SRAM @DPTR1 embedded chip
;step-2. increase DPTR1
ASM example:
INC XBUS_AUX
MOV DPTR,#TARGET_ADDR ;DPTR1
DEC XBUS_AUX
MOV DPTR,#SOURCE_ADDR ;DPTR0
MOV R7,#xxH
LOOP: MOVX A,@DPTR
;DPTR0
INC DPTR
;DPTR0, if need
DB 0A5H
;MOVX @DPTR1,A & INC DPTR1
DJNZ R7,LOOP
